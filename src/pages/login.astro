---
import { safeParse } from "valibot";

import { LoginForm } from "@/components/LoginForm";
import type { LoginApiError } from "@/pages/api/login";
import { LoginSchema } from "@/schemas/login";

const redirectTo = Astro.url.searchParams.get("redirectTo");
const errors: Partial<LoginApiError> = {};
if (Astro.request.method === "POST") {
  try {
    await new Promise((resolve) => setTimeout(resolve, 2500));

    const data = await Astro.request.formData();
    const validation = safeParse(LoginSchema, Object.fromEntries(data));

    if (validation.success) {
      Astro.cookies.set("session", "session", {
        httpOnly: true,
        maxAge: 3600,
        sameSite: true,
        secure: true,
      });
      return Astro.redirect(redirectTo ?? "/");
    }

    for (const issue of validation.issues) {
      const paths = issue.path?.map(({ key }) => key);
      if (paths?.includes("email")) {
        errors.email = issue.message;
      }
      if (paths?.includes("password")) {
        errors.password = issue.message;
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<h1>Login</h1>
<h2>Server form</h2>
<form method="POST">
  <label>
    Email:
    <input type="email" name="email" value="test@email.com" />
  </label>
  {errors.email && <p>{errors.email}</p>}
  <label>
    Password:
    <input type="password" name="password" value="password" />
  </label>
  {errors.password && <p>{errors.password}</p>}
  <button>Login</button>
  {errors.api && <p>{errors.api}</p>}
</form>
<h2>Client form</h2>
<LoginForm redirectTo={redirectTo} client:load />
